#!/bin/bash -e

function main() {
  cd $(dirname $0)
  [ -f settings ] && . settings || { err "file settings not found"; return 2; }
  local fatal=0
  [[ $CLOUD_PROVIDER ]] || { err "Missing setting CLOUD_PROVIDER"; fatal=1; }
  [[ $CLUSTER_NAME ]] || { err "Missing setting CLUSTER_NAME"; fatal=1; }
  [[ $DNS_DOMAIN ]] || { err "Missing setting DNS_DOMAIN"; fatal=1; }
  [[ $AWS_KUBE_REGION ]] || { err "Missing setting AWS_KUBE_REGION"; fatal=1; }
  [[ $AWS_KUBE_ZONE ]] || { err "Missing setting AWS_KUBE_ZONE"; fatal=1; }
  [[ $AWS_DOMAIN_ID ]] || { err "Missing setting AWS_DOMAIN_ID"; fatal=1; }
  [ $fatal -eq 1 ] && return 2

  [[ "$CLOUD_PROVIDER" == "AWS" ]] || { err "Cloud provider must be AWS"; return 2; }

  FQDN=${CLUSTER_NAME}.${DNS_DOMAIN}

  trap _cleanup EXIT
  TMP=$(mktemp)
  _setip
  _update
  err "Completed successfully"
}

function _cleanup {
  [[ $TMP ]] && rm -rf $TMP;
}

_setip()
{
local values=master-${AWS_KUBE_REGION}${AWS_KUBE_ZONE}.masters.${CLUSTER_NAME}.${DNS_DOMAIN}
while [ true ]; do
  ip=$(aws ec2 --region $AWS_KUBE_REGION describe-instances --filters Name=tag:Name,Values=$values --query "Reservations[*].Instances[*].PublicIpAddress" --output=text)
  [[ $ip ]] && break
  { err "IP not found; will try again in 5 seconds"; }
  sleep 5
done

cat <<EOF > $TMP
{
  "Comment": "Update A Record",
  "Changes": [
    {
      "Action": "UPSERT",
      "ResourceRecordSet": {
        "Name": "api.$FQDN",
        "Type": "A",
        "TTL": 10,
        "ResourceRecords": [
          {
            "Value": "$ip"
          }
        ]
      }
    }
  ]
}
EOF
}

_update() {
  while [ true ]; do
    err "Updating A record api.$FQDN with IP $ip"
    aws route53 change-resource-record-sets --hosted-zone-id $AWS_DOMAIN_ID --change-batch file://$TMP && { err "record updated"; return 0; }
    err "Updated failed; will try again in 5 seconds"
    sleep 5
  done
}

err() { echo "$@" 1>&2; }

main $@
