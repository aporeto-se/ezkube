#!/bin/bash

DEBUG=false

MASTER_SIZE_DEFAULT="t2.medium"
NODE_SIZE_DEFAULT="t2.medium"
NODE_COUNT_DEFAULT="2"
REGION_DEFAULT="us-east-2"
ZONE_DEFAULT="a"
ACCOUNT_DEFAULT="439917055340"
DNS_DOMAIN_DEFAULT="se.aporeto.io"
DOMAIN_ID_DEFAULT=Z12AZDZQXW3TZN

# DEUBG=true

# This command 'ssh-keygen -y -f key' can be used to derive the SSH public key
# from the private key

main() {
  local fatal=0
  which aws > /dev/null 2>&1 || { err "aws not in path"; fatal=1; }
  which kops > /dev/null 2>&1 || { err "kops not in path"; fatal=1; }
  which ssh-keygen > /dev/null 2>&1 || { err "ssh-keygen not in path"; fatal=1; }
  [ $fatal -eq 1 ] && { err "Unable to continue"; return 2; }

  local usage="Usage:$0 (create|delete|config|list)"

  trap cleanup EXIT
  tmp=$(mktemp -d)
  log="/tmp/ezkube-${RANDOM}${RANDOM}.log"
  touch $log || { err "Unable to write to /tmp"; return 2; }

  cmd=""

  case "$1" in
    create) shift; create $@ ;;
    creat) shift; create $@ ;;
    crea) shift; create $@ ;;
    cre) shift; create $@ ;;
    cr) shift; create $@ ;;
    delete) shift; delete $@ ;;
    config) shift; config $@ ;;
    confi) shift; config $@ ;;
    conf) shift; config $@ ;;
    con) shift; config $@ ;;
    co) shift; config $@ ;;
    list) shift; list $@ ;;
    ls) shift; list $@ ;;
    l) shift; list $@ ;;
    *) err $usage; return 2;
  esac
}

function cleanup() {
  [[ $tmp ]] && rm -rf $tmp;
  err "Install file is $log"
}

function create() {
  # If clustername is FQDN we just want the cluster name
  local clusterNameInput=$1
  [[ $clusterNameInput ]] || { err "Usage:$0 create cluster_name"; return 2; }
  local key=$2
  [[ $key ]] || { err "Key name must be specified"; return 2; }

  local clusterName=$(echo $clusterNameInput | awk -F. '{ print $1 }')
  [[ $clusterName ]] || { err "Usage:$0 $action cluster_name"; return 2; }

  local dnsDomain=$(echo $fqdn | awk -F. '{for (i=2; i<NF; i++) printf $i "."; print $NF}')
  [[ $dnsDomain ]] && {
    dlog "Using DNS_DOMAIN=$dnsDomain"
  } || {
    dlog "Using DNS_DOMAIN=$DNS_DOMAIN_DEFAULT (default)"
    dnsDomain=$DNS_DOMAIN_DEFAULT
  }

  local fqdn="${clusterName}.${dnsDomain}"
  dlog "Using FQDN=$fqdn"

  local bucket="s3://ezkube/${fqdn}"

  local zone=""
  [[ $ZONE ]] && {
    dlog "Using ZONE=$ZONE"
    zone=$ZONE
  } || {
    dlog "Using ZONE=$ZONE_DEFAULT (default)"
    zone=$ZONE_DEFAULT
  }

  local masterSize=""
  [[ $MASTER_SIZE ]] && {
    dlog "Using MASTER_SIZE=$MASTER_SIZE"
    masterSize=$MASTER_SIZE
  } || {
    dlog "Using MASTER_SIZE=$MASTER_SIZE_DEFAULT (default)"
    masterSize=$MASTER_SIZE_DEFAULT
  }

  local nodeSize=""
  [[ $NODE_SIZE ]] && {
    dlog "Using NODE_SIZE=$NODE_SIZE"
    nodeSize=$NODE_SIZE
  } || {
    dlog "Using NODE_SIZE=$NODE_SIZE_DEFAULT (default)"
    nodeSize=$NODE_SIZE_DEFAULT
  }

  local nodeCount=""
  [[ $NODE_COUNT ]] && {
    dlog "Using NODE_COUNT=$NODE_COUNT"
    nodeCount=$NODE_COUNT
  } || {
    dlog "Using NODE_COUNT=$NODE_COUNT_DEFAULT (default)"
    nodeCount=$NODE_COUNT_DEFAULT
   }

  local region=""
  [[ $REGION ]] && {
    dlog "Using REGION=$REGION"
    region=$REGION
  } || {
    dlog "Using REGION=$REGION_DEFAULT (default)"
    region=$REGION_DEFAULT
  }

  local version=""
  [[ $VERSION ]] && {
    dlog "Using specified version $VERSION"
    version=$VERSION
  } || {
    dlog "kops will use latest default version"
  }

  local domainId=""
  [[ $DOMAIN_ID ]] && {
    dlog "Using DOMAIN_ID=$DOMAIN_ID"
    domainId=$DOMAIN_ID
  } || {
    dlog "Using DOMAIN_ID=$DOMAIN_ID_DEFAULT (default)"
    domainId=$DOMAIN_ID_DEFAULT
  }

  local zones="${region}${zone}"

  aws s3 ls $bucket > /dev/null 2>&1 && {
    err "AWS Bucket Exist! Aborting!!!"
    return 2
  }

  local remoteKey="s3://ezkey/${key}"

  aws s3 ls $remoteKey >> /dev/null 2>&1 || {
    err "Key with name $name does not exist"
    return 2
  }

  dlog "aws s3 cp $remoteKey $tmp/key"
  aws s3 cp $remoteKey $tmp/key >> $log 2>&1 || {
    rm -rf $keyfile
    err "Failed to copy key"
    return 2
  }

  dlog "chmod 400 $tmp/key"
  chmod 400 $tmp/key || {
    err "Failed to chmod key"
    return 2
  }

  # Extract public key from private key. Send err to log and stdout to file
  dlog "ssh-keygen -y -f $tmp/key > $tmp/pub"
  ssh-keygen -y -f $tmp/key > $tmp/pub 2>> $log || {
    err "Failed to extract public key"
    return 2
  }

  local kops="kops create cluster --cloud=aws"
  # kops+=" --vpc $vpcId"
  # kops+=" --subnets $subnetId"
  kops+=" --networking=amazon-vpc-routed-eni"
  kops+=" --name $fqdn"
  kops+=" --zones=$zones"
  kops+=" --associate-public-ip=true"
  kops+=" --ssh-public-key=$tmp/pub"
  kops+=" --state=${bucket}/state"
  kops+=" --master-size=$masterSize"
  kops+=" --node-size=$nodeSize"
  kops+=" --node-count=$nodeCount"
  kops+=" --yes"

  dlog "Running->$kops"

  err "Creating cluster"
  dlog "cmd->$kops"

  $kops 2>> $log || {
    err "Failed to create cluster"
    return 3
  }

  err "Cluster created; pausing for 10 seconds"
  sleep 10

  err "Resolving IP of master node"
  cmd="aws ec2 --region $region describe-instances --filters"
  cmd+="Name=iam-instance-profile.arn,Values=*masters.$fqdn\""
  cmd+="--query \"Reservations[*].Instances[*].PublicIpAddress\" --output text"
  dlog "cmd->$cmd"
  i=0
  local ip=""
  while true; do
    i=$((i+1))
    ip=$(aws ec2 --region $region describe-instances \
      --filters "Name=iam-instance-profile.arn,Values=*masters.$fqdn" \
      --query "Reservations[*].Instances[*].PublicIpAddress" --output text
    )
    [[ $ip ]] && break
    [ $i -gt 10 ] && {
      err "Unable to get instance IP; giving up"
      return 2
    }
    err "Waiting for instance IP"
    sleep 5
  done
  err "IP is $ip"

  cmd="aws route53 change-resource-record-sets --hosted-zone-id $domainId"
  cmd+=" --change-batch \"$(_json_a_record $fqdn $ip)\""
  dlog "cmd->$cmd"
  i=0
  while true; do
    i=$((i+1))
    aws route53 change-resource-record-sets --hosted-zone-id $domainId \
       --change-batch "$(_json_a_record $fqdn $ip)" >> $log 2>&1 && break
    [ $i -gt 10 ] && { 
      cat $log 1>&2
      err "Unable to create/update dns"
      return 2
    }
    err "DNS update failed, will try again"
    sleep 5
  done
  err "DNS updated; adding kube config to local"

  _config || return $?
  err "Cluster will be online soon"
  return 0
}

function delete() {
  # If clustername is FQDN we just want the cluster name
  local clusterNameInput=$1
  [[ $clusterNameInput ]] || { err "Usage:$0 delete cluster_name"; return 2; }
  local clusterName=$(echo $clusterNameInput | awk -F. '{ print $1 }')
  [[ $clusterName ]] || { err "Usage:$0 $action cluster_name"; return 2; }

  local dnsDomain=$(echo $fqdn | awk -F. '{for (i=2; i<NF; i++) printf $i "."; print $NF}')
  [[ $dnsDomain ]] && {
    dlog "Using DNS_DOMAIN=$dnsDomain"
  } || {
   dlog "Using DNS_DOMAIN=$DNS_DOMAIN_DEFAULT (default)"
   dnsDomain=$DNS_DOMAIN_DEFAULT
  }

  local fqdn="${clusterName}.${dnsDomain}"
  dlog "Using FQDN=$fqdn"

  local bucket="s3://ezkube/${fqdn}"
  dlog  "Using BUCKET=$bucket"

  err "Deleting cluster"

  cmd="kops delete cluster --name $fqdn --state=${bucket}/state --yes"
  dlog "cmd->$cmd"
  kops delete cluster --name $fqdn --state=${bucket}/state --yes >> $log 2>&1 || {
    err "Cluster delete failed"
    return 2
  }

  err "Deleting bucket"
  dlog "cmd->aws s3 rm $bucket --recursive"
  aws s3 rm $bucket --recursive >> $log 2>&1 || {
    err "Failed to delete bucket"
    return 2
  }
}

function config() {
  local usage="Usage:$0 config cluster_name"
  # If clustername is FQDN we just want the cluster name
  clusterNameInput=$1
  [[ $clusterNameInput ]] || { err $usage; return 2; }

  clusterName=$(echo $clusterNameInput | awk -F. '{ print $1 }')
  [[ $clusterName ]] || { err "Usage:$0 $action cluster_name"; return 2; }

  dnsDomain=$(echo $fqdn | awk -F. '{for (i=2; i<NF; i++) printf $i "."; print $NF}')
  [[ $dnsDomain ]] && {
    dlog "Using DNS_DOMAIN=$dnsDomain"
  } || {
   dlog "Using DNS_DOMAIN=$DNS_DOMAIN_DEFAULT (default)"
   dnsDomain=$DNS_DOMAIN_DEFAULT
  }

  fqdn="${clusterName}.${dnsDomain}"
  dlog "Using FQDN=$fqdn"

  bucket="s3://ezkube/${fqdn}"
  dlog "Using BUCKET=$bucket"

  _config || return $?
  return 0
}

function _config() {
  dlog "kops export kubecfg $fqdn --state=${bucket}/state"
  kops export kubecfg $fqdn --state=${bucket}/state >> $log 2>&1 || {
    err "Failed to get config"
    return 2
  }
}

function list() { aws s3 ls s3://ezkube | grep PRE | awk '{print  $2}' | awk -F/ '{print $1}'; }

_json_a_record()
{
local fqdn=$1
local ip=$2
cat <<EOF
{
  "Comment": "Update A Record",
  "Changes": [
    {
      "Action": "UPSERT",
      "ResourceRecordSet": {
        "Name": "api.$fqdn",
        "Type": "A",
        "TTL": 10,
        "ResourceRecords": [
          {
            "Value": "$ip"
          }
        ]
      }
    }
  ]
}
EOF
}

err() { echo "$@" 1>&2; return 0; }

dlog() {
  [[ $DEBUG ]] || return 0
  $DEBUG || return 0
  err $@
  return 0
}

main $@
